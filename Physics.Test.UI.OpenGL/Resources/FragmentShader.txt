#version 330

uniform vec3 lightPos;
uniform vec3 viewPos;

in vec3 fragmentColor;
in vec3 fragmentNormal;
in vec3 fragmentPos;

out vec3 outputColor;

void main()
{
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	float ambientStrength = 0.1;
	float specularStrength = 0.5;

	//outputColor = fragmentColor;
    //outputColor = vec3(1.0, 1.0, 0.0);
	//float cosTheta = dot( lightPos , fragmentNormal );
	//outputColor = fragmentColor * cosTheta;
	
    vec3 ambient = ambientStrength * lightColor;
	
	vec3 norm = normalize(fragmentNormal);
	vec3 lightDir = normalize(lightPos - fragmentPos);  
	
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;	
	
	vec3 viewDir = normalize(viewPos - fragmentPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;
	
	outputColor = (ambient + diffuse + specular) * fragmentColor;
	//outputColor = fragmentColor;
}