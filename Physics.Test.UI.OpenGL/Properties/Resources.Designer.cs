//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Basics.Physics.Test.UI.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Basics.Physics.Test.UI.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330
        ///
        ///uniform vec3 lightPos;
        ///uniform vec3 viewPos;
        ///
        ///in vec3 fragmentColor;
        ///in vec3 fragmentNormal;
        ///in vec3 fragmentPos;
        ///
        ///out vec3 outputColor;
        ///
        ///void main()
        ///{
        ///	vec3 lightColor = vec3(1.0, 1.0, 1.0);
        ///	float ambientStrength = 0.1;
        ///	float specularStrength = 0.5;
        ///
        ///	//outputColor = fragmentColor;
        ///    //outputColor = vec3(1.0, 1.0, 0.0);
        ///	//float cosTheta = dot( lightPos , fragmentNormal );
        ///	//outputColor = fragmentColor * cosTheta;
        ///	
        ///    vec3 ambient = ambientStrength * lightColor;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FragmentShader {
            get {
                return ResourceManager.GetString("FragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330
        ///
        ///uniform vec3 lightPos;
        ///uniform vec3 viewPos;
        ///
        ///in vec3 fragmentColor;
        ///in vec3 fragmentNormal;
        ///in vec3 fragmentPos;
        ///
        ///out vec3 outputColor;
        ///
        ///void main()
        ///{
        ///	vec3 lightColor = vec3(1.0, 1.0, 1.0);
        ///	float ambientStrength = 0.1;
        ///	float specularStrength = 0.5;
        ///
        ///	//outputColor = fragmentColor;
        ///    //outputColor = vec3(1.0, 1.0, 0.0);
        ///	//float cosTheta = dot( lightPos , fragmentNormal );
        ///	//outputColor = fragmentColor * cosTheta;
        ///	
        ///    vec3 ambient = ambientStrength * lightColor;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FragmentShaderTextured {
            get {
                return ResourceManager.GetString("FragmentShaderTextured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///layout(location = 0) in vec3 aPosition;
        ///layout(location = 1) in vec3 vertexColor;
        ///layout(location = 2) in vec3 vertexNormal;
        ///
        ///out vec3 fragmentColor;
        ///out vec3 fragmentNormal;
        ///out vec3 fragmentPos;
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///uniform vec3 lightPos;
        ///uniform vec3 viewPos;
        ///
        ///void main(void)
        ///{
        ///    fragmentColor = vertexColor;
        ///	fragmentNormal = vertexNormal;
        ///	fragmentPos = vec3(model * vec4(aPosition, 1.0));
        ///    gl_Position = vec4(aPositi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexShader {
            get {
                return ResourceManager.GetString("VertexShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///layout(location = 0) in vec3 aPosition;
        ///layout(location = 1) in vec3 vertexColor;
        ///layout(location = 2) in vec3 vertexNormal;
        ///
        ///out vec3 fragmentColor;
        ///out vec3 fragmentNormal;
        ///out vec3 fragmentPos;
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///uniform vec3 lightPos;
        ///uniform vec3 viewPos;
        ///
        ///void main(void)
        ///{
        ///    fragmentColor = vertexColor;
        ///	fragmentNormal = vertexNormal;
        ///	fragmentPos = vec3(model * vec4(aPosition, 1.0));
        ///    gl_Position = vec4(aPositi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexShaderTextured {
            get {
                return ResourceManager.GetString("VertexShaderTextured", resourceCulture);
            }
        }
    }
}
